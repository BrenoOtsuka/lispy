; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)


; Function Definitions
(def {fun} (fn {params body} {
    def (head params) (fn (tail params) body)
}))

; Unpack List for Function
(fun {unpack func lst} {
    eval (join (list func) lst)
})

; Pack List for Function
(fun {pack func & lst} {func lst})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform Several things in Sequence
(fun {do & lst} {
    if (== lst nil)
        {nil}
        {last lst}
})

; Open new scope
(fun {let b} {
    ((fn {_} b) ())
})

; Logical Functions
(fun {not x}   {- 1 x})
(fun {or x y}  {+ x y})
(fun {and x y} {* x y})

; Miscellaneous Functions
(fun {flip func a b} {func b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; List Functions

;; First, Second, or Third Item in List
(fun {fst lst} { eval (head lst)})
(fun {snd lst} { eval (head (tail lst))})
(fun {trd lst} { eval (head (tail (tail lst)))})

; List Length
(fun {len lst} {
    if (== lst nil)
        {0}
        {+ 1 (len (tail lst))}
})

; Nth item in List
(fun {nth n lst} {
    if (== n 0)
        {fst lst}
        {nth (- n 1) (tail lst)}
})

; Last item in List
(fun {last lst} {
    if (== (tail lst) nil)
        {eval (head lst)}
        {last (tail lst)}
})

; Take N items
(fun {take n lst} {
    if (== n 0)
        {nil}
        {
            join (head lst) 
                 (take (- n 1) (tail lst))
        }
})

; Drop N items
(fun {drop n lst} {
    if (== n 0)
        {lst}
        {drop (- n 1) (tail lst)}
})

; Split at N
(fun {split n lst} {
    list (take n lst) (drop n lst)
})

; Element of List
(fun {elem x lst} {
    if (== lst nil)
        {false}
        {if (== (fst lst) x) 
            {true}
            {elem x (tail lst)}}
})

; Apply Function to List
(fun {map func lst} {
    if (== lst nil)
        {nil}
        {join 
            (list (func (fst lst)))
            (map func (tail lst))}
})

; Apply Filter to List
(fun {filter func lst} {
    if (== lst nil)
        {nil}
        {join 
            (if (func (fst lst))
                {head lst}
                {nil})
            (filter func (tail lst))}
})

; Fold Left
(fun {foldl func acc lst} {
    if (== lst nil)
        {acc}
        {foldl func 
              (func acc (fst lst)) 
              (tail lst)}
})

; Conditional Functions
(fun {select & cs} {
    if (== cs nil)
        {error "No selection found"}
        {if (fst (fst cs))
            {snd (fst cs)}
            {unpack select (tail cs)}}
})

(def {otherwise} true)

(fun {case x & cs} {
    if (== cs nil)
        {error "No case found"}
        {if (== x (fst (fst cs)))
            {snd (fst cs)}
            {unpack case 
                   (join (list x)
                         (tail cs))}}
})
